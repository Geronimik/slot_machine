
[ ]
from matplotlib import image
from matplotlib import pyplot as plt
from pylab import rcParams
import random
import pandas as pd
[ ]
rcParams['figure.figsize'] = 18, 18
img = plt.imread('work.png')
plt.imshow(img)
plt.show()

Моделирование игры против игрового автомата
Создадим цикл, где с помощью многократно выпадающего случайного дискретного число от 000 до 999 создадим имитацию работы игрового автомата. Обозначим все выигрышные ситуации и доходы с них.

Согласно методу Монте-Карло, чем больше испытаний проведено, тем ближе полученная частота к теоритической вероятности. Для более показательного результата заведем цикл на 1.000.000 игр.

[ ]
games = 1000000 # количество игр.
winning = 0 # деньги, выигранные у автомата за games игр.
coast = 1 # цена одной игры.

for i in range(games):
  number = random.randint(0, 1000)

  # обработка ситуаций с выпадением 111, 333, 555, 777, 999.
  if number == 111:
    winning += 10
  elif number == 333:
    winning += 15
  elif number == 555:
    winning += 50
  elif number == 777:
    winning += 200
  elif number == 999:
    winning += 100

  # обработка ситуаций с выпадением *77 и **7
  elif number % 100 == 77:
    winning += 5
  elif number % 10 == 7:
    winning += 3

  # обработка ситуаций с выпадением *00 и **0.
  elif number % 100 == 0:
    winning += 2
  elif number % 10 == 0:
    winning += 1
Теперь посчитаем траты на игры и доходы с них. Сопоставим полученные результаты и попытаемся понять, выгодна ли, в сущности, игра на данном автомате.

[ ]
# количество потраченных денег на игры
loss = coast * games
print(f"Денег потрачено: {loss} руб.")

# количество выигранных денег
print(f"Денег выиграно: {winning} руб.")
Денег потрачено: 1000000 руб.
Денег выиграно: 806221 руб.
Как видно из данного случая, денег выиграно меньше, чем потрачено (результат для 1.000.000 игр)

[ ]
difference = loss - winning
difference_percent = round((difference / loss) * 100, 1)
print(f"Чистая потеря составила {difference} руб. Выигрыш составил лишь {difference_percent}% от вложенных денег.")
Чистая потеря составила 193779 руб. Выигрыш составил лишь 19.4% от вложенных денег.
Из чего можно сделать вывод, что игра явно не выгодна на большом количестве сыгранных партий. Частные же случаи могут иногда быть выигрышными. Однако, вероятность выигрыша для каждой отдельной игры составляет примерно 1/5.

Теперь определим средний выигрыш с каждой отдельной игры по результатам моделирования и определим, сколько именно теряется денег при каждой игре.

[ ]
loss_per_game = int(round(((loss - winning) / games) * 100, 0))
print(f"Количество денег, теряемых за каждую отдельную игру: {loss_per_game} коп. с {coast} руб.")
Количество денег, теряемых за каждую отдельную игру: 19 коп. с 1 руб.
Теоритический расчет вероятностей и выигрышей (проигрышей)
Вероятность наступления благоприятного события А можно найти по формуле:

P(A) = Qa / Q,

где Qa- количество всех вариантов наступления события А;

Q - все варианты исхода событий.

Количество всех исходов событий для данного автомата равно 1.000 (от 000 до 999). Посчитаем количество комбинаций, которые приносят хоть какой-то выигрыш.

[ ]
numbers = range(0, 1000) # заведем все значения, возможные для данного автомата.

numbers_list = [111, 333, 555, 777, 999] # список, где хранятся все значения, которые приносят хоть какой-то выигрыш (ниже еще пополнится).

for number in numbers:
   if number % 100 == 77:
    numbers_list.append(number)
   elif number % 10 == 7:
    numbers_list.append(number)

   elif number % 100 == 0:
    numbers_list.append(number)
   elif number % 10 == 0:
    numbers_list.append(number)

useful_numbers = len(numbers_list)
print("Количество значений, которые приносят хоть какой-то выигрыш:", useful_numbers)
Количество значений, которые приносят хоть какой-то выигрыш: 205
Соответственно, вероятность попасть в любое выигрышное значение составляет:

[ ]
probability = round(useful_numbers / len(list(numbers)) * 100, 1)
print(f"Вероятность выигрыша {probability}%")
Вероятность выигрыша 20.5%
В примере выше, в процессе моделирования игры, мы получили значение вероятности, равное 20.6%. Теоритическое и эмпирическое значения вероятностей очень близки друг к другу.

Теперь попробуем теоритически расчитать средний выигрыш (проигрыш) с одной игры.

Для начала, расчитаем сумму выигрыша всех выигрышных позиций.

[ ]
winning_theory = 0

for number in numbers:
  if number == 111:
    winning_theory += 10
  elif number == 333:
    winning_theory += 15
  elif number == 555:
    winning_theory += 50
  elif number == 777:
    winning_theory += 200
  elif number == 999:
    winning_theory += 100

  elif number % 100 == 77:
    winning_theory += 5
  elif number % 10 == 7:
    winning_theory += 3

  elif number % 100 == 0:
    winning_theory += 2
  elif number % 10 == 0:
    winning_theory += 1

print(f"Сумма выигрыша всех выигрышных позиций: {winning_theory} руб")
Соответственно, посчитаем стоимость выпадения каждой отдельной позиции, как количество потраченных на все игры денег (по 1 руб за позицию) минус сумма всех выигрышных позиций.

[ ]
loss_theory = len(list(numbers)) * coast - winning_theory
print(f"Общая сумма проигрыша: {loss_theory} руб")
Общая сумма проигрыша: 299 руб
Сумма проигрыша с одной игры:

[ ]
loss_per_game_theory = int(round(loss_theory / len(list(numbers)) * 100, 0))
print(f"Количество денег, теряемых за каждую отдельную игру: {loss_per_game_theory} коп. c 1 руб.")
Количество денег, теряемых за каждую отдельную игру: 30 коп. c 1 руб.
Из расчета с помощью моделирования мы видим, что потери с одной игры составляют 21 копейку.

Для более наглядного сравнения результатов моделирования и теоритического рачета составим отдельный датафрейм.

[ ]
comparison = {"comparison_parameters" : ["losing_a_game, rub", "probability_of_winning, %"],
              "theoretical_calculation" : [(loss_per_game_theory / 100), probability],
              "simulation_results" : [(loss_per_game / 100), difference_percent]}

df_comparison = pd.DataFrame(comparison)
df_comparison

Как видно, данные с моделирования и теоритические расчеты для вероятности выигрыша очень хорошо сходятся. Можно сделать вывод, что постренная модель, имитирующая игру, очень хорошо сходится с результатами реальной игры в настоящий автомат при всех прочих равных заданных правилах и условиях.

